/*

문제
	그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 
	단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 
	정점 번호는 1번부터 N번까지이다.

입력
	첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 
	다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 
	어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 
	입력으로 주어지는 간선은 양방향이다.

출력
	첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. 
	V부터 방문된 점을 순서대로 출력하면 된다.

*/

#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <algorithm>

using namespace std;

vector<vector<int>> vertex;

void DFS(int N, int start)
{
	bool check[1001];
	int idx = 1;
	int V = start;

	check[V] = false;
	

	stack<int> idxStack;

	idxStack.push(V);


	while (!idxStack.empty())	
	{
		V = idxStack.top();
		idxStack.pop();
		cout << V << " ";

		for (int i = (int)vertex[V].size() - 1; i >= 0 ; --i)
		{
			int temp = vertex[V][i];
			if (check[temp])
			{
				check[temp] = false;
				idxStack.push(temp);
				//cout << temp << " ";
			}
		}
	}
	cout << '\n';
}

void BFS(int N, int start)
{
	bool check[1001];
	int idx = 0;
	int V = start;

	check[V] = false;
	cout << V << " ";

	queue<int> indexQueue;
	indexQueue.push(start);

	while (!indexQueue.empty())
	{
		V = indexQueue.front();
		indexQueue.pop();
		for (int i = 0; i < (int)vertex[V].size(); ++i)
		{
			if (check[vertex[V][i]])
			{
				indexQueue.push(vertex[V][i]);
				check[vertex[V][i]] = false;
				cout << vertex[V][i] << " ";
			}
		}
	}
	cout << '\n';
}

int main()
{
	int N, M, V;
	
	cin >> N >> M >> V;

	vertex.resize(N + 1);

	for (int i = 0; i < M; ++i)
	{
		int index, v;
		cin >> index >> v;
		vertex[index].push_back(v);
		vertex[v].push_back(index);
		
		sort(vertex[index].begin(), vertex[index].end());
		sort(vertex[v].begin(), vertex[v].end());
	}

	DFS(N, V);
	BFS(N, V);

	return 0;
}