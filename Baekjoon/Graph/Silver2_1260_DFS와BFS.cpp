/*

문제
	그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 
	단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 
	정점 번호는 1번부터 N번까지이다.

입력
	첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 
	다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 
	어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 
	입력으로 주어지는 간선은 양방향이다.

출력
	첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. 
	V부터 방문된 점을 순서대로 출력하면 된다.

*/

#include <iostream>
#include <vector>
#include <queue>

using namespace std;

int N, M, V;

vector<vector<bool>> connection;

void DFS(vector<bool> &check, int start)
{
	check[start] = true;
	cout << start << " ";
	for (int i = 1; i <= N; ++i)
	{
		if (check[i] || !connection[start][i])
			continue;
		DFS(check, i);
	}
}

void BFS(vector<bool> check, queue<int> idxQueue)
{
	int start = idxQueue.front();
	idxQueue.pop();

	if (!check[start])
	{
		check[start] = true;
		cout << start << " ";
	}

	for (int i = 1; i <= N; ++i)
	{
		if (check[i] || !connection[start][i])
			continue;
		cout << i << " ";
		check[i] = true;
		idxQueue.push(i);
	}
	if(!idxQueue.empty())
		BFS(check, idxQueue);
}


int main()
{

	vector<bool> check;
	cin >> N >> M >> V;

	connection.resize(N+1);
	for (int i = 1; i <= N; ++i)
		connection[i].resize(N + 1);

	check.resize(N + 1);
	
	for (int i = 0; i < M; ++i)
	{
		int start = 0, end = 0;
		cin >> start >> end;
		connection[start][end] = true;
		connection[end][start] = true;
	}

	DFS(check, V);
	cout << '\n';
	check.assign(N+1, false);
	queue<int> idx;
	idx.push(V);

	BFS(check, idx);

	return 0;
}